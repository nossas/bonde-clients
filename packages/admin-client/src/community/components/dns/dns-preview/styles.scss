//
// Reference: https://codepen.io/vasansr/pen/jWazPM
//
.container-fluid {
  //
  // Define the widths: play around with these to get a best fit.
  //
  $margin: 30px;
  $text-width: 180px;
  $num-width: 80px;

  //
  // Basic styles, good for a large display. Everything fits in
  // one row, no wrapping. All text based cells grow equally.
  //

  // Main container: initialize the flex, direction is row, no wrapping. width 100%
  .table-row {
      display: flex;          display: -webkit-flex;
      flex-direction: row;    -webkit-flex-direction: row;
      flex-wrap: no-wrap;     -webkit-flex-wrap: no-wrap;
      padding-left: 15px;
      padding-right: 15px;
  }

  // Wrappers around cells and other wrappers: flex, row
  .wrapper {
    display: flex;           display: -webkit-flex;
    flex-direction: row;     -webkit-flex-direction: row;
    flex-grow: 0;            -webkit-flex-grow: 0;
  }

  // Text cells and wrappers: grow equally when there is extra space
  .text-4, .text-2, .text {
    flex-grow: 1;           -webkit-flex-grow: 1;
  }

  // Text cells: truncate and show ellipsis when not enough space
  .text {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    padding-right: 20px;
  }

  // Fix the minimum width of the leaf level cells
  .text {
    width: $text-width;
  }

  .num {
    width: $num-width;
    text-align: right;
  }

  //
  // Media queries: optimize for different screen widths.
  //

  // convenience mixin for setting wrapper styles vertical
  @mixin vertical() {
    // Let the wrapper flex vertically, so we get 2 rows
    flex-direction: column;     -webkit-flex-direction: column;
    // can't have the children grow, since this means vertical growth
    div {
      flex-grow: 0;  -webkit-flex-grow: 0;
      // but let them grow horizontally, 100% to fill the wrapper
      width: 100%;
    }
  }

  // First break: when one row does not fit, make it 2 rows
  @media all and (max-width: ($margin*2 + $text-width*4 + $num-width*4)) {
    // inner wrappers vertical
    .text-2, .num-2 {
      @include vertical();
    }
    // fix the widths of the inner level wrappers, else they take
    // children's natural size
    .text-2 { width: $text-width; }
    .num-2  { width: $num-width;  }
  }

  // Second break: when two rows is not enough, make it four
  @media all and (max-width: ($margin*2 + $text-width*2 + $num-width*2)) {
    // Outer wrappers also vertical
    .text-4, .num-4 {
      @include vertical();
    }
    // fix widths
    .text-4 { width: $text-width, }
    .num-4  { width: $num-width,  }
  }

  // Final: collapse all of them into one single column
  @media all and (max-width: ($margin*2 + $text-width + $num-width)) {
    // wrap the main row container
    .table-row {
      @include vertical();
    }
    // force the num cells to left-align to look better
    .num {
      text-align: left;
    }
  }

  .table-row {
    border-collapse: collapse;
    align-items: center;
    margin-bottom: 10px;
    font-size: 16px;
    color: #000;
  }

  .table-row.header {
    padding-top: 8px;
    padding-bottom: 8px;
  }

  .circle {
    width: 28px;
    height: 28px;
    font-size: 18px;
    margin-right: 20px;
    color: #fff;
    background-color: red;
    display: flex;
    align-items: center;
    justify-content: center;

    &.checked {
      background-color: #7ed321;
    }
  }

  .table-row .wrapper:last-child .text {
    padding: 0;
  }

  .table-row.header {
    font-size: 12px;
    font-weight: 400;
    text-transform: uppercase;
    color: #aaa;
    background-color: transparent;
  }

  .table-row.active {
    box-shadow: 0 0 4px 0px rgba(100,100,100,.5);
  }

  .table-row {
    background-color: #fff;
    align-items: center;

    .cell--domain-name {
      cursor: pointer;

      &:hover {
        text-decoration: underline;
      }
    }
  }

  .table-row .wrapper .text ul {
    padding-left: 15px;
  }

  .menu--preview {
    font-size: 23px;
    cursor: pointer;
    color: #aaa;
  }
}
