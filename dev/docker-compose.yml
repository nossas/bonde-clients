# /etc/hosts 127.0.0.1 api-graphql.bonde.devel traefik.bonde.devel bonde.devel

volumes:
  redis_data:
    driver: local
  s3_data:
    driver: local

services:
  traefik:
    image: "traefik"
    depends_on:
      - redis
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--providers.redis=true"
      - "--providers.redis.endpoints=redis:6379"
      - "--providers.redis.rootkey=traefik"
    # - --configfile=/traefik.toml
    ports:
      - "80:80"
    #   - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # - "./traefik.toml:/traefik.toml"
    environment:
      AWS_ACCESS_KEY_ID: xxxxxxx
      AWS_SECRET_ACCESS_KEY: xxxxxx
      AWS_REGION: us-east-1
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.bonde.devel`)
      - traefik.http.services.traefik.loadbalancer.server.port=8080

  api-graphql:
    image: hasura/graphql-engine:v2.44.0
    restart: always
    environment:
      - HASURA_GRAPHQL_DATABASE_URL=${HASURA_GRAPHQL_DATABASE_URL:-postgres://user:pass@postgres:5432/bonde}
      - HASURA_GRAPHQL_ENABLE_CONSOLE=${HASURA_GRAPHQL_ENABLE_CONSOLE:-false}
      - HASURA_GRAPHQL_ADMIN_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET:-segredo123}
      - HASURA_GRAPHQL_JWT_SECRET=${HASURA_GRAPHQL_JWT_SECRET}
      - HASURA_GRAPHQL_UNAUTHORIZED_ROLE=${HASURA_GRAPHQL_UNAUTHORIZED_ROLE:-anonymous}
      - HASURA_GRAPHQL_ENABLED_LOG_TYPES=${HASURA_GRAPHQL_ENABLED_LOG_TYPES:-startup, query-log, http-log, webhook-log, websocket-log}
      - HASURA_GRAPHQL_INFER_FUNCTION_PERMISSIONS=false
      - API_ACCOUNTS_URL=${API_ACCOUNTS_URL:-http://api-accounts.bonde.devel}
      - API_ACTIVISTS_URL=${API_ACTIVISTS_URL:-http://activists.bonde.devel}
      - API_DOMAINS_URL=${API_DOMAINS_URL:-http://api-domains.bonde.devel}
      - API_NOTIFICATIONS_URL=${API_NOTIFICATIONS_URL:-http://notifications.bonde.devel}
      - API_PAYMENTS_URL=${API_PAYMENTS_URL:-http://api-payments.bonde.devel}
      - API_REDES_URL=${API_REDES_URL:-http://api-redes.bonde.devel}
      - WEBHOOK_INVITATIONS_URL=${WEBHOOK_INVITATIONS_URL:-http://webhook-accounts.bonde.devel/invitations}
      - WEBHOOK_ACTIVISTS_PRESSURE_URL=${WEBHOOK_ACTIVISTS_PRESSURE_URL:-http://webhook-activists.bonde.devel/webhook/pressure}
      - ACTION_BASE_URL=${ACTION_BASE_URL:-http://mailchimp-resync.bonde.devel}
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL:-http://n8n.bonde.devel/webhook}
      - PORT=8080
    volumes:
      - ../bonde-apis/migrations/migrations:/hasura-migrations
      - ../bonde-apis/migrations/metadata:/hasura-metadata
    labels:
      - traefik.enable=true
      - traefik.http.routers.api-graphql.rule=Host(`api-graphql.bonde.devel`)
      - traefik.http.services.api-graphql.loadbalancer.server.port=8080

  redis:
    image: redislabs/redismod
    # image: docker.io/bitnami/redis:6.2
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    ports:
      - '6379:6379'
    volumes:
      - 'redis_data:/bitnami/redis/data'
networks:
  default:
    name: bonde

  # redis-commander:
  #   image: rediscommander/redis-commander:latest
  #   environment:
  #     - REDIS_HOSTS=local:redis:6379
  #   ports:
  #     - "8081:8081"
    # labels:
    #   - traefik.enable=true
    #   - traefik.http.routers.api-graphql.rule=Host(`redis-commander.bonde.devel`)
    #   - traefik.http.services.api-graphql.loadbalancer.server.port=8081

  # portainer_edge_agent:
  #   image: portainer/agent
  #   command: -H unix:///var/run/docker.sock
  #   restart: always
  #   volumes:
  #     - /:/host
  #     - /var/lib/docker/volumes:/var/lib/docker/volumes
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - portainer_agent_data:/data
  #   environment:
  #     - CAP_HOST_MANAGEMENT=1
  #     - EDGE=1
  #     - EDGE_ID=${EDGE_ID}
  #     - EDGE_KEY=${EDGE_KEY}

  # portainer:
  #   image: portainer/portainer-ce
  #   command: -H unix:///var/run/docker.sock
  #   restart: always
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - portainer_data:/data
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.portainer.rule=Host(`portainer.bonde.devel`)
  #     - traefik.http.services.portainer.loadbalancer.server.port=9000
  #     - traefik.http.routers.portainer.service=portainer

  #     - traefik.http.routers.edge.rule=Host(`edge.bonde.devel`)
  #     - traefik.http.services.edge.loadbalancer.server.port=8000
  #     - traefik.http.routers.edge.service=portainer

  # generate-certificate:
  #   image: nossas/bonde-apis-depo
  #   build: ../bonde-workers/packages/certs/
  #   ports:
  #     - 8000

  # elastic-agent:
  #   image: docker.elastic.co/beats/elastic-agent:8
  #   container_name: elastic-agent
  #   restart: always
  #   user: root # note, synthetic browser monitors require this set to `elastic-agent`
  #   environment:
  #     - FLEET_ENROLLMENT_TOKEN={enrollment-token}
  #     - FLEET_ENROLL=1
  #     - FLEET_URL={fleet-server-url}
